name: Parent Workflow

on: [pull_request]

permissions:
  contents: write
  pages: write
  pull-requests: write
  id-token: write

#test13
jobs:
  trigger-workflows:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Trigger "Check Amalgamation" workflow and get its run_id
      - name: Trigger "Check Amalgamation" Workflow
        id: trigger_amalgamation
        run: |
          echo "Triggering Check Amalgamation workflow..."
          gh workflow run "Check amalgamation" --ref $GITHUB_SHA
          
          # Wait to ensure the workflow is triggered and then fetch its run_id
          sleep 5
          RUN_ID=$(gh run list --workflow "Check amalgamation" --json databaseId,headSha -q ".[? headSha == '$GITHUB_SHA'] | max_by(.created_at) | .databaseId")
          echo "Triggered Check Amalgamation workflow with RUN_ID: $RUN_ID"
          echo "RUN_ID_AMALGAMATION=$RUN_ID" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.PARENT_WORKFLOW_TRIGGER }}

      # Trigger "Test Trudag Extensions" workflow and get its run_id
      - name: Trigger "Test Trudag Extensions" Workflow
        id: trigger_trudag
        run: |
          echo "Triggering Test Trudag Extensions workflow..."
          gh workflow run "Test Trudag extensions" --ref $GITHUB_SHA
          
          # Wait to ensure the workflow is triggered and then fetch its run_id
          sleep 5
          RUN_ID=$(gh run list --workflow "Test Trudag extensions" --json databaseId,headSha -q ".[? headSha == '$GITHUB_SHA'] | max_by(.created_at) | .databaseId")
          echo "Triggered Test Trudag Extensions workflow with RUN_ID: $RUN_ID"
          echo "RUN_ID_TRUDAG=$RUN_ID" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.PARENT_WORKFLOW_TRIGGER }}

      # Trigger "Pull Request Labeler" workflow and get its run_id
      - name: Trigger "Pull Request Labeler" Workflow
        id: trigger_labeler
        run: |
          echo "Triggering Pull Request Labeler workflow..."
          gh workflow run "Pull Request Labeler" --ref $GITHUB_SHA
          
          # Wait to ensure the workflow is triggered and then fetch its run_id
          sleep 5
          RUN_ID=$(gh run list --workflow "Pull Request Labeler" --json databaseId,headSha -q ".[? headSha == '$GITHUB_SHA'] | max_by(.created_at) | .databaseId")
          echo "Triggered Pull Request Labeler workflow with RUN_ID: $RUN_ID"
          echo "RUN_ID_LABELER=$RUN_ID" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.PARENT_WORKFLOW_TRIGGER }}

      # Wait and Download Artifacts From Child Workflows
      - name: Wait and Download Artifacts From Child Workflows
        env:
          GH_TOKEN: ${{ secrets.PARENT_WORKFLOW_TRIGGER }}
        run: |
          echo "Waiting for artifacts from child workflows..."

          REQUIRED_RUN_IDS=(
            $RUN_ID_AMALGAMATION
            $RUN_ID_TRUDAG
            $RUN_ID_LABELER
          )

          COMPLETED=false
          MAX_RETRIES=60  # Retry up to 60 times (15 mins with 15s intervals)
          RETRY_COUNT=0

          while [ "$COMPLETED" = "false" ] && [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            COMPLETED=true # Assume all runs have completed and artifacts are ready

            for RUN_ID in "${REQUIRED_RUN_IDS[@]}"; do
              echo "Attempting to download artifacts for RUN_ID: $RUN_ID"

              # Download artifacts from the specific workflow run ID
              RUN_DIR="artifacts/$RUN_ID"
              mkdir -p "$RUN_DIR"
              gh run download "$RUN_ID" --dir "$RUN_DIR" || COMPLETED=false
            done

            if [ "$COMPLETED" = "false" ]; then
              echo "Not all artifacts are ready. Waiting 15 seconds..."
              sleep 15
              RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
          done

          if [ "$COMPLETED" = "false" ]; then
            echo "Timed out while waiting for artifacts."
            exit 1
          fi

          echo "All required artifacts have been downloaded successfully!"
